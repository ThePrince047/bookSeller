<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="Guna2Elipse1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAA8TOZWPEzmgzxN5oQpgO6FH5zyhi107IU8S+aEPEzmhDxM5oQ8TOaEPEzmhDxM5oQ8TOaEPEzmhDxM
        5oQ8TOaEPEzmhDxM5oQ8TOaEPEzmhDxM5oQ8TOaEPEzmhDxN5oQpgu6FH5zyhi5y7IU8S+aEPEzmgTxM
        5jY8TOYAPEzmADxM5u88TOb/PE3m/ymB7v8en/L/LXXs/zxL5v88TOb/PEzm/zxM5v88TOb/PEzm/ztL
        5v86Sub/Oknm/zpJ5v86Sub/O0vm/zxM5v88TOb/PEzm/zxM5v88TOb/PE3m/yiD7v8envL/LnPs/zxL
        5v88TOb/PEzmrTxM5gU8TOYAPEzm/zxM5v88Teb/KYHu/x6f8v8tdez/PEvm/zxM5v88TOb/PEzm/ztK
        5v9BUuf/UGLo/1xx6f9jeOr/Ynjq/1pv6f9NX+j/P0/m/ztK5v88TOb/PEzm/zxM5v88Teb/KIPu/x6e
        8v8uc+z/PEvm/zxM5v88TOa+PEzmCTxM5gA8TOb/PEzm/zxN5v8pge7/Hp/y/y117P88S+b/PEzm/zxM
        5v8/T+b/boXr/6TD8f+73fP/w+f0/8br9f/G6vX/wub0/7ja8/+cuvD/YXbq/zxM5v88TOb/PEzm/zxN
        5v8og+7/Hp7y/y5z7P88S+b/PEzm/zxM5r48TOYJPEzmADxM5v88TOb/PE3m/ymB7v8en/L/LXXs/zxL
        5v88TOb/O0vm/0lb5/+x0vL/z/X1/83y9f/L8fX/y/D1/8vw9f/M8fX/zfP1/8/19f+cuvD/P1Dm/zxM
        5v88TOb/PE3m/yiD7v8envL/LnPs/zxL5v88TOb/PEzmvjxM5gk8TOYAPEzm/zxM5v88Teb/KYHu/x6f
        8v8tdez/PEvm/zxM5v88TOb/PU3m/11y6f+Qre//rM3y/7nb8/+94PT/veD0/7fZ8/+oyPH/h6Pu/1Nm
        6P88TOb/PEzm/zxM5v88Teb/KIPu/x6e8v8uc+z/PEvm/zxM5v88TOa+PEzmCTxM5gA8TOb/PEzm/zxN
        5v8pge7/Hp/y/y117P88S+b/PEzm/zxM5v88TOb/Okrm/zxM5v9EVef/TV/o/1Jl6P9RZOj/S17o/0JT
        5/87S+b/O0vm/zxM5v88TOb/PEzm/zxN5v8og+7/Hp7y/y5z7P88S+b/PEzm/zxM5r48TOYJPEzmADxM
        5uE8TOb7O03n+imB7f0fnvH+LnXr/j5L5f4+TeX/PUzl/j1M5f49TOX+PUzl/j1M5f48S+T+PEvk/jxL
        5P48S+X+PUzl/j1M5f49TOX+PUzl/j1M5f49TOX+PU3l/imD7f4fnfH+MHPr/z9L5f89TOX/P0zjpWtZ
        sgjAcFEBPEzmLzxM5k1tWa+ldW6h/HJ3o/12aaD8i2yt/ZV4t/19Xp/8fF2e/Hxdnvx8XZ78fF2e/Hxd
        nvx8XZ78fF2e/Hxdnvx8XZ78fF2e/Hxdnvx8XZ78fF2e/Hxdnvx8XZ78dW6h/XF2o/2KfbT+kXOz/Xxd
        nfqMYovNmmV8sJllfYOcZXoAnGV6B5tle7ibZHv/m2R7/5pkev+ve5L/vYui/5xmfP+bZXv/mmR7/5pk
        e/+aZHv/mmR7/5pke/+aZHv/mmR7/5pke/+aZHv/mmR7/5pke/+aZHv/mmR7/5pke/+bZHv/mmN6/7WB
        mf+4hZz/m2V7/5plfP+ZZX3/mWV9+5llfQCZZX0JmWV9vpllff+ZZX3/mGR8/617lP+7iqP/mmZ+/5lk
        ff+me4T/t5iO/7eYjv+3mI7/t5iO/7eYjv+3mI7/t5iO/7eYjv+3mI7/t5iO/7eYjv+3mY7/q4SH/5ll
        ff+YZHz/s4Ga/7aEnf+ZZX3/mWV9/5llff+ZZX3/mWV9AJllfQmZZX2+mWV9/5llff+YZHz/rXuU/7uK
        o/+aZn7/mGR9/7eYjv/Vy5//1Mqf/9TKn//Uyp//1Mqf/9TKn//Uyp//1Mqf/9TKn//Uyp//1Mqf/9XM
        oP/BqpT/mmd+/5hkfP+zgZr/toSd/5llff+ZZX3/mWV9/5llff+ZZX0AmWV9CZllfb6ZZX3/mWV9/5hk
        fP+te5T/u4qj/5pmfv+YZHz/t5mP/9XMof/UyqD/1Mqg/9TKoP/UyqD/1Mqg/9TKoP/UyqD/1Mqg/9TK
        oP/UyqD/1cyh/8Krlf+aZ37/mGR8/7OBmv+2hJ3/mWV9/5llff+ZZX3/mWV9/5llfQCZZX0JmWV9vpll
        ff+ZZX3/mGR8/617lP+7iqP/mmZ+/5hkff+th4j/xK+W/8Svlv/Er5b/xK+W/8Svlv/Er5b/xK+W/8Sv
        lv/Er5b/xK+W/8Svlv/FsJb/tJSN/5llff+YZHz/s4Ga/7aEnf+ZZX3/mWV9/5llff+ZZX3/mWV9AJll
        fQiZZX29mWV9/5plfP+ZZHv/rnuT/7yKo/+bZn3/mmV8/5pmfP+caH3/nGh9/5xoff+caH3/nGh9/5xo
        ff+caH3/nGh9/5xoff+caH3/nGh9/5xoff+bZnz/mmV8/5lke/+0gZr/t4Sd/5llfP+ZZX3/mWV9/5ll
        ff6gYnYArltoAZxke32VZ4HpjGuJ+4lriv+cf5//qIys/4ttjP+KbIv/imyL/4pri/+Ka4v/imuL/4pr
        i/+Ka4v/imuL/4pri/+Ka4v/imuL/4pri/+Ka4v/imuL/4psi/+KbIv/iWuK/6GFpf+lh6b8lmZ/5Zll
        feCZZX3gmWV9uR2d9AAXoPoJKJjpYzCV4tQuleT6LZXk/y+Y5/8xmun/LZXk/y2V5P8tleT/LZXk/y2V
        5P8tleT/LZXk/y2V5P8tleT/LZXk/y2V5P8tleT/LZXk/y2V5P8tleT/LZXk/y2V5P8tleT/MJno/zGZ
        6P46kNiNnmN4HpllfR6ZZX0PH5zyCh+c8okenPL3HJzz/yGe8/8kn/P/JJ/z/ySf8/8kn/P/JJ/z/ySf
        8/8kn/P/JJ/z/ySf8/8kn/P/JJ/z/ySf8/8kn/P/JJ/z/ySf8/8kn/P/JJ/z/ySf8/8kn/P/JJ/z/ySf
        8/8kn/P/IZ7z/B6c84QhmfAAHJ31AAAAAAAfnPJoH5zy9SOe8v9euvP/ltb0/57a9P+e2vT/ntr0/57a
        9P+e2vT/ntr0/57a9P+e2vT/ntr0/57a9P+e2vT/ntr0/57a9P+e2vT/ntr0/57a9P+e2vT/ntr0/57a
        9P+e2vT/ntr0/57a9P+N0vSqEZXyECKe8gAem/IAAAAAAB+c8s8dm/L/Xrrz/8Ts9f/N8PX/zfD1/83w
        9f/N8PX/zfD1/83w9f/N8PX/zfD1/83w9f/N8PX/zfD1/83w9f/N8PX/zfD1/83w9f/N8PX/zfD1/83w
        9f/N8PX/zfD1/83w9f/N8PX/zfD1/83w9ZPL7/UA0PL0AAAAAAAAAAAAH5zy+SKe8v+W1vT/zfD1/8rv
        9f/K7/X/yu/1/8rv9f/K7/X/yu/1/8rv9f/K7/X/yu/1/8rv9f/K7/X/yu/1/8rv9f/K7/X/yu/1/8rv
        9f/K7/X/yu/1/8rv9f/K7/X/yu/1/8rv9f/K7/X/yu/1k8rv9QDK7/QAAAAAAAAAAAAfnPL3Ip3y/5TV
        9P/N8fX/yu/1/8rv9f/K7/X/yu/1/8rv9f/K7/X/yu/1/8rv9f/K7/X/yu/1/8rv9f/K7/X/yu/1/8rv
        9f/K7/X/yu/1/8rv9f/K7/X/yu/1/8rv9f/K7/X/yu/1/8rv9f/K7/WTyu/1AMrv9AAAAAAAAAAAAB+c
        8sodm/L/WLjz/8Hr9f/N8PX/zfD1/83w9f/N8PX/zfD1/83w9f/N8PX/zfD1/83w9f/N8PX/zfD1/83w
        9f/N8PX/zfD1/83w9f/N8PX/zfD1/83w9f/N8PX/zfD1/83w9f/N8PX/zfD1/83w9ZPL7/UA0fL0AAAA
        AAAAAAAAH5zyYB+c8vIhnfL/Vbbz/4zR9P+V1fT/ldX0/5XV9P+V1fT/ldX0/5XV9P+V1fT/ldX0/5XV
        9P+V1fT/ldX0/5XV9P+V1fT/ldX0/5XV9P+V1fT/ldX0/5XV9P+V1fT/ldX0/5XV9P+V1fT/gsz0sBWX
        8hUinfIAH5zyAAAAAAAPnP4GG5z1ex2c9PIbm/T/Hpz0/yCd9P8gnfT/IJ30/yCd9P8gnfT/IJ30/yCd
        9P8gnfT/IJ30/yCd9P8gnfT/IJ30/yCd9P8gnfT/IJ30/yCd9P8gnfT/IJ30/yCd9P8gnfT/IJ30/yCd
        9P8fnfT/HZz0iiSc7QAanPcAAAAAAN2XMRTBl00tXZqzeEKbztM9ntj5PKHb/jyf2P48m9T+PJvU/jyb
        1P48m9T+PJvU/jyb1P48m9T+PJvU/jyb1P48m9T+PJvU/jyb1P48m9T+PJvU/jyb1P48m9T+PKDZ/jyh
        2/48ndf+PJvU/jyb1PxRm7+M7JYiCsiXRgDUlz0A05c7xNOXO+nVlzjm0Jc+7cOqX/u+uHP+wKpi/sSX
        Sv7El0r+xJdK/sSXSv7El0r+xJdK/sSXSv7El0r+xJdK/sSXSv7El0r+xJdK/sSXSv7El0r+xJdK/sSY
        TP6/sGn+vrhz/sKkWv7Elkn+xpdI/NGXPe3TlzuJ05c7AtOXOwDTlzv/05c7/9OXO//Tlzv/0KtT/826
        aP/QrFX/1Jc6/9SXOv/Ulzr/1Jc6/9SXOv/Ulzr/1Jc6/9SXOv/Ulzr/1Jc6/9SXOv/Ulzr/1Jc6/9SX
        Ov/Ulzr/1Jk8/8+xXP/Numf/0aRL/9SWOf/Ulzr/05c7/9OXO77TlzsJ05c7ANOXO//Tlzv/05c7/9OX
        O//Pq1T/zLpp/8+sVv/Tlzv/05c7/9OXO//Tlzv/05c7/9OXO//Tlzv/05c7/9OXO//Tlzv/05c7/9OX
        O//Tlzv/05c7/9OXO//TmT3/zrFd/8y6aP/QpEz/05Y6/9OXO//Tlzv/05c7vtOXOwnTlzsA05c7/9OX
        O//Tlzv/05c7/8+rVP/Mumn/z6xW/9OXO//Tlzv/05c7/9OXO//Tlzv/05c7/9OXO//Tlzv/05c7/9OX
        O//Tlzv/05c7/9OXO//Tlzv/05c7/9OZPf/OsV3/zLpo/9CkTP/Tljr/05c7/9OXO//Tlzu+05c7CdOX
        OwDTlzvv05c7/9OXO//Tlzv/z6tU/8y6af/PrFb/05c7/9OXO//Tlzv/05c7/9OXO//Tlzv/05c7/9OX
        O//Tlzv/05c7/9OXO//Tlzv/05c7/9OXO//Tlzv/05k9/86xXf/Mumj/0KRM/9OWOv/Tlzv/05c7/9OX
        O63TlzsF05c7ANOXO1bTlzuD05c7hNOXO4TPqlSFzLlnhs+rVYXTlzuE05c7hNOXO4TTlzuE05c7hNOX
        O4TTlzuE05c7hNOXO4TTlzuE05c7hNOXO4TTlzuE05c7hNOXO4TTmT2EzrFchsy5Z4bQpEyF05Y6hNOX
        O4TTlzuB05c7NtOXOwDTlzsAAAAAAwAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAAAAAAAgAAAAIAA
        AACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAAAAAAAHAAAABwAAAA8AAAAPAAAADwAAAA8AAAAHAAAABwAA
        AAMAAAABAAAAAQAAAAEAAAABAAAAAQAAAAM=
</value>
  </data>
</root>